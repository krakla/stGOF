,"modelr"
,"modeltime"
,"multcomp"
,"munsell"
,"mvtnorm"
,"nloptr"
,"numDeriv"
,"odbc"
,"openssl"
,"padr"
,"parallelly"
,"parsnip"
,"patchwork"
,"pbkrtest"
,"PerformanceAnalytics"
,"pillar"
,"pkgbuild"
,"pkgconfig"
,"pkgload"
,"plogr"
,"plotly"
,"plyr"
,"png"
,"praise"
,"prettyunits"
,"pROC"
,"processx"
,"prodlim"
,"progress"
,"progressr"
,"promises"
,"prophet"
,"proxy"
,"ps"
,"purrr"
,"quadprog"
,"Quandl"
,"quantmod"
,"quantreg"
,"R6"
,"randomForest"
,"rappdirs"
,"rcmdcheck"
,"RColorBrewer"
,"Rcpp"
,"RcppArmadillo"
,"RcppEigen"
,"RcppParallel"
,"RcppRoll"
,"reactable"
,"reactR"
,"readr"
,"readxl"
,"recipes"
,"rematch"
,"rematch2"
,"remotes"
,"reprex"
,"reshape2"
,"rgl"
,"RgoogleMaps"
,"riingo"
,"rJava"
,"rjson"
,"rlang"
,"rmarkdown"
,"RMySQL"
,"roxygen2"
,"rprojroot"
,"rsample"
,"RSQLite"
,"rstan"
,"rstantools"
,"rstudioapi"
,"rversions"
,"rvest"
,"sandwich"
,"sass"
,"scales"
,"selectr"
,"sessioninfo"
,"shape"
,"shiny"
,"shiny.semantic"
,"slider"
,"snakecase"
,"sourcetools"
,"sp"
,"SparseM"
,"SQUAREM"
,"StanHeaders"
,"stringi"
,"stringr"
,"sys"
,"testthat"
,"TH.data"
,"tibble"
,"tidymodels"
,"tidyquant"
,"tidyr"
,"tidyselect"
,"tidyverse"
,"timeDate"
,"timetk"
,"tinytex"
,"tseries"
,"tsfeatures"
,"TTR"
,"tune"
,"tzdb"
,"urca"
,"usethis"
,"utf8"
,"uuid"
,"vcd"
,"vctrs"
,"viridisLite"
,"vroom"
,"waldo"
,"warp"
,"whisker"
,"withr"
,"workflows"
,"workflowsets"
,"xfun"
,"xgboost"
,"XLConnect"
,"xlsx"
,"xlsxjars"
,"XML"
,"xml2"
,"xopen"
,"xtable"
,"xts"
,"yaml"
,"yardstick"
,"zip"
,"zoo"
,"foreign"
,"mgcv"
,"nlme"
,"survival"
,"boot"
,"class"
,"cluster"
,"codetools"
,"KernSmooth"
,"lattice"
,"MASS"
,"Matrix"
,"nnet"
,"rpart"
,"spatial")
install.packages("abind","alphavantager"
,"anytime"
,"askpass"
,"assertthat"
,"backports"
,"base64enc"
,"BH"
,"bit"
,"bit64"
,"bitops"
,"blob"
,"brew"
,"brio"
,"broom"
,"bslib"
,"cachem"
,"callr"
,"car"
,"carData"
,"caret"
,"cellranger"
,"checkmate"
,"cli"
,"clipr"
,"colorspace"
,"commonmark"
,"conflicted"
,"cpp11"
,"crayon"
,"credentials"
,"crosstalk"
,"curl"
,"data.table"
,"datapasta"
,"DBI"
,"dbplyr"
,"desc"
,"devtools"
,"dials"
,"DiceDesign"
,"diffobj"
,"digest"
,"doParallel"
,"dplyr"
,"dtplyr"
,"dygraphs"
,"e1071"
,"ellipsis"
,"evaluate"
,"extraDistr"
,"fansi"
,"farver"
,"fastmap"
,"fontawesome"
,"forcats"
,"foreach"
,"forecast"
,"fracdiff"
,"fs"
,"furrr"
,"future"
,"future.apply"
,"gargle"
,"generics"
,"gert"
,"ggmap"
,"ggplot2"
,"ggvis"
,"gh"
,"gitcreds"
,"glmnet"
,"globals"
,"glue"
,"googledrive"
,"googlesheets4"
,"googleVis"
,"gower"
,"GPfit"
,"gridExtra"
,"gt"
,"gtable"
,"hardhat"
,"haven"
,"here"
,"highr"
,"hms"
,"htmltools"
,"htmlwidgets"
,"httpuv"
,"httr"
,"ids"
,"infer"
,"ini"
,"inline"
,"ipred"
,"isoband"
,"iterators"
,"janitor"
,"jpeg"
,"jquerylib"
,"jsonlite"
,"knitr"
,"labeling"
,"later"
,"lava"
,"lazyeval"
,"lhs"
,"lifecycle"
,"listenv"
,"lme4"
,"lmtest"
,"loo"
,"lubridate"
,"magrittr"
,"maps"
,"maptools"
,"markdown"
,"MatrixModels"
,"matrixStats"
,"memoise"
,"mime"
,"minqa"
,"modeldata"
,"ModelMetrics"
,"modelr"
,"modeltime"
,"multcomp"
,"munsell"
,"mvtnorm"
,"nloptr"
,"numDeriv"
,"odbc"
,"openssl"
,"padr"
,"parallelly"
,"parsnip"
,"patchwork"
,"pbkrtest"
,"PerformanceAnalytics"
,"pillar"
,"pkgbuild"
,"pkgconfig"
,"pkgload"
,"plogr"
,"plotly"
,"plyr"
,"png"
,"praise"
,"prettyunits"
,"pROC"
,"processx"
,"prodlim"
,"progress"
,"progressr"
,"promises"
,"prophet"
,"proxy"
,"ps"
,"purrr"
,"quadprog"
,"Quandl"
,"quantmod"
,"quantreg"
,"R6"
,"randomForest"
,"rappdirs"
,"rcmdcheck"
,"RColorBrewer"
,"Rcpp"
,"RcppArmadillo"
,"RcppEigen"
,"RcppParallel"
,"RcppRoll"
,"reactable"
,"reactR"
,"readr"
,"readxl"
,"recipes"
,"rematch"
,"rematch2"
,"remotes"
,"reprex"
,"reshape2"
,"rgl"
,"RgoogleMaps"
,"riingo"
,"rJava"
,"rjson"
,"rlang"
,"rmarkdown"
,"RMySQL"
,"roxygen2"
,"rprojroot"
,"rsample"
,"RSQLite"
,"rstan"
,"rstantools"
,"rstudioapi"
,"rversions"
,"rvest"
,"sandwich"
,"sass"
,"scales"
,"selectr"
,"sessioninfo"
,"shape"
,"shiny"
,"shiny.semantic"
,"slider"
,"snakecase"
,"sourcetools"
,"sp"
,"SparseM"
,"SQUAREM"
,"StanHeaders"
,"stringi"
,"stringr"
,"sys"
,"testthat"
,"TH.data"
,"tibble"
,"tidymodels"
,"tidyquant"
,"tidyr"
,"tidyselect"
,"tidyverse"
,"timeDate"
,"timetk"
,"tinytex"
,"tseries"
,"tsfeatures"
,"TTR"
,"tune"
,"tzdb"
,"urca"
,"usethis"
,"utf8"
,"uuid"
,"vcd"
,"vctrs"
,"viridisLite"
,"vroom"
,"waldo"
,"warp"
,"whisker"
,"withr"
,"workflows"
,"workflowsets"
,"xfun"
,"xgboost"
,"XLConnect"
,"xlsx"
,"xlsxjars"
,"XML"
,"xml2"
,"xopen"
,"xtable"
,"xts"
,"yaml"
,"yardstick"
,"zip"
,"zoo"
,"foreign"
,"mgcv"
,"nlme"
,"survival"
,"boot"
,"class"
,"cluster"
,"codetools"
,"KernSmooth"
,"lattice"
,"MASS"
,"Matrix"
,"nnet"
,"rpart"
,"spatial")
library(ggplot2)
# Use stdout as per normal...
print("Hello, world!")
# Use plots...
plot(cars)
# Even ggplot!
qplot(wt, mpg, data = mtcars, colour = factor(cyl))
negative_likelihood <- function(p){
dbinom(heads, 100, p)*-1
}
# Test that our function is behaving as expected
negative_likelihood(biased_prob)
heads <- rbinom(1,100,0.5)
negative_likelihood <- function(p){
dbinom(heads, 100, p)*-1
}
# Test that our function is behaving as expected
negative_likelihood(biased_prob)
biased_prob <- 0.6
negative_likelihood <- function(p){
dbinom(heads, 100, p)*-1
}
# Test that our function is behaving as expected
negative_likelihood(biased_prob)
nlm(negative_likelihood,0.5,stepmax=0.5)
# simulate some log-logistic data
library(FAdist)
install.packages('FAdist')
# simulate some log-logistic data
library(FAdist)
vY = rllog(n = 1000, shape = 5, scale = 6)
vY
# log-likelihood function
fnLLLL = function(vParams, vData) {
# uses the density function of the log-logistic function from FAdist
return(-sum(log(dllog(vData, shape = vParams[1], scale = vParams[2]))))
}
# optimize it
optim(c(2, 3), fnLLLL, vData = vY)
install.packages('actuar')
devtools::load_all(".")
devtools::load_all(".")
x<-rnorm(100,mean=2,sd=2)
stGOF(x ~ norm, x, order = 4, method = "MLE")
stGOF(x ~ logis, x, order = 4, method = "MLE")
devtools::load_all(".")
stGOF(x ~ logis, x, order = 4, method = "MLE")
stGOF(x ~ norm, x, order = 4, method = "MLE")
stGOF(x ~ logis, x, order = 4, method = "MME")
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
?stGOF
devtools::load_all(".")
devtools::load_all(".")
?stGOF
stGOF(x ~ norm, x, order = 4, method = "MLE")
